/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.StateHealthDeptManager;

import Business.EcoSystem;
import Business.Enterprise.DistributorEnterprise;
import Business.Enterprise.SupplierEnterprise;
import Business.InventoryCatalog.InventoryItem;
import Business.Network.CountryNetwork;
import Business.Network.StateNetwork;
import Business.OrderQueue.OrderRequest;
import Business.Organization.InventoryManagementOrganization;
import Business.Organization.Organization;
import Business.Organization.SupplierOrganization;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ivanr
 */
public class ManageSupplierOrderJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageSupplierOrderJPanel
     */
    JPanel userProcessContainer;
    UserAccount account;
    SupplierOrganization organization;
    SupplierEnterprise enterprise;
    StateNetwork network;
    CountryNetwork countryNetwork;
    EcoSystem ecoSystem;
    public ManageSupplierOrderJPanel(JPanel userProcessContainer, UserAccount account, SupplierOrganization organization, SupplierEnterprise enterprise,StateNetwork network, CountryNetwork countryNetwork, EcoSystem ecosystem) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.account = account;
        this.organization = organization;
        this.enterprise = enterprise;
        this.network = network;
        this.countryNetwork = countryNetwork;
        this.ecoSystem = ecosystem;
    }

    public void populateTable(){
        DefaultTableModel model = (DefaultTableModel)workRequestJTable.getModel();
        model.setRowCount(0);
        if(enterprise.getOrderQueue() != null){
            for(OrderRequest request : enterprise.getOrderQueue().getOrderRequestList()){
                Object[] row = new Object[5];
                row[0] = request;
                row[1] = request.getQuantity();
                row[2] = request.getSender().getEmployee().getName();
                row[3] = request.getReceiver() == null ? null : request.getReceiver().getEmployee().getName();
                row[4] = request.getStatus();
                model.addRow(row);
            }
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        assignJButton = new javax.swing.JButton();
        trackOrderJButton = new javax.swing.JButton();
        approveOrderJButton = new javax.swing.JButton();
        refreshJButton = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Manage Order Approvals");

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Order Item", "Quantity", "Sender", "Receiver", "Status", "Supplier"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);

        assignJButton.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        assignJButton.setText("Assign to me");
        assignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignJButtonActionPerformed(evt);
            }
        });

        trackOrderJButton.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        trackOrderJButton.setText("Track Order");
        trackOrderJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trackOrderJButtonActionPerformed(evt);
            }
        });

        approveOrderJButton.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        approveOrderJButton.setText("Approve");
        approveOrderJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                approveOrderJButtonActionPerformed(evt);
            }
        });

        refreshJButton.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        refreshJButton.setText("Refresh");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });

        backJButton.setText("<<Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 29, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 861, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 871, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(assignJButton)
                                .addGap(19, 19, 19)
                                .addComponent(trackOrderJButton)
                                .addGap(265, 265, 265)
                                .addComponent(approveOrderJButton)
                                .addGap(9, 9, 9)
                                .addComponent(refreshJButton))
                            .addComponent(backJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(59, 59, 59)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(approveOrderJButton)
                    .addComponent(refreshJButton)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(assignJButton)
                            .addComponent(trackOrderJButton))))
                .addGap(253, 253, 253)
                .addComponent(backJButton)
                .addGap(50, 50, 50))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void assignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignJButtonActionPerformed
        int selectedRow = workRequestJTable.getSelectedRow();
        if (selectedRow < 0){
            return;
        }
        OrderRequest request = (OrderRequest)workRequestJTable.getValueAt(selectedRow, 0);
        String status = request.getStatus();
        if(status != "Processed"){
            request.setReceiver(account);
            request.setStatus("In Process");
            JOptionPane.showMessageDialog(null, "You have been assigned");
            populateTable();
        }
    }//GEN-LAST:event_assignJButtonActionPerformed

    private void trackOrderJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trackOrderJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = workRequestJTable.getSelectedRow();
        if (selectedRow < 0){
                JOptionPane.showMessageDialog(null,"Please select a row !");
            return;
        }
        //        OrderRequest request = (OrderRequest)workRequestJTable.getValueAt(selectedRow, 0);
        //        TrackOrderJPanel trackOrderJPanel = new TrackOrderJPanel(userProcessContainer, request);
        //        userProcessContainer.add("TrackOrderJPanel", trackOrderJPanel);
        //        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        //        layout.next(userProcessContainer);
    }//GEN-LAST:event_trackOrderJButtonActionPerformed

    private void approveOrderJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_approveOrderJButtonActionPerformed
        int selectedRow = workRequestJTable.getSelectedRow();
        if (selectedRow < 0){
            return;
        }
        OrderRequest request = (OrderRequest)workRequestJTable.getValueAt(selectedRow, 0);
        if(request.getStatus().equals("Processed")){
            JOptionPane.showMessageDialog(null, "Order already Processed!");
            return;
        }
        
        InventoryItem inventoryItem = this.organization.getVaccineStock().getInventoryByVaccine(request.getVaccine());
        if(inventoryItem != null && inventoryItem.checkQuantity(request.getQuantity())){
            inventoryItem.setQuantity( (inventoryItem.getQuantity() - request.getQuantity()) );
            System.out.println(ecoSystem);
            List<DistributorEnterprise> distributorEnterprise = ecoSystem.getDistributorEnterpriseFromAllCountries();
            for(DistributorEnterprise dis: distributorEnterprise){
                for(Organization inventoryManagementOrganization: dis.getOrganizationDirectory().getOrganizationList()){
                    if(inventoryManagementOrganization instanceof InventoryManagementOrganization){
                        if(inventoryManagementOrganization.getUserAccountDirectory().checkIfUserAccountExist(request.getSender()) != null){
                            System.out.println(((InventoryManagementOrganization) inventoryManagementOrganization).getInventoryCatalog());
                            System.out.println("Testing");
                            InventoryItem inventoryItemSender = ((InventoryManagementOrganization) inventoryManagementOrganization).getInventoryCatalog().getInventoryByVaccine(request.getVaccine());
                            if(inventoryItemSender != null){
                                inventoryItemSender.setQuantity(inventoryItemSender.getQuantity() + request.getQuantity());
                            }
                            else{
                                ((InventoryManagementOrganization) inventoryManagementOrganization).getInventoryCatalog().addNewItem(request.getVaccine(), request.getQuantity());
                            }
                        }
                        else{
                            JOptionPane.showMessageDialog(null, "Enterprise not found!");
                            return;
                        }
                    }
                }
            }
            request.setStatus("Processed");
        }
        else{
            JOptionPane.showMessageDialog(null, "Stock not available!");
            return;
        }
        JOptionPane.showMessageDialog(null, "Supplier Organization has been created successfully!");
        populateTable();
    }//GEN-LAST:event_approveOrderJButtonActionPerformed

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        populateTable();
    }//GEN-LAST:event_refreshJButtonActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton approveOrderJButton;
    private javax.swing.JButton assignJButton;
    private javax.swing.JButton backJButton;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton refreshJButton;
    private javax.swing.JButton trackOrderJButton;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
