/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.StateHealthDeptManager;


import Business.Enterprise.StateHealthDeptEnterprise;
import Business.Enterprise.SupplierEnterprise;
import Business.Network.StateNetwork;
import Business.OrderQueue.OrderRequest;
import Business.Organization.SHDOrganization;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Varun
 */
public class ManageOrderApprovalsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageOrderApprovalsJPanel
     */
    JPanel userProcessContainer;
    UserAccount account;
    SHDOrganization organization;
    StateHealthDeptEnterprise enterprise;
    StateNetwork network;

    public ManageOrderApprovalsJPanel(JPanel userProcessContainer, UserAccount account, SHDOrganization organization, StateHealthDeptEnterprise enterprise,StateNetwork network) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.account = account;
        this.organization = organization;
        this.enterprise = enterprise;
        this.network = network;
    }
    
    public void populateTable(){
    
        
        DefaultTableModel model = (DefaultTableModel)workRequestJTable.getModel();
        
        model.setRowCount(0);
        
        for(OrderRequest request : enterprise.getOrderQueue().getOrderRequestList()){
            Object[] row = new Object[5];
            row[0] = request;
            row[1] = request.getType();
            row[2] = request.getSender().getEmployee().getName();
            row[3] = request.getReceiver() == null ? null : request.getReceiver().getEmployee().getName();
            row[4] = request.getStatus();
            
            model.addRow(row);
        }
    
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        assignJButton = new javax.swing.JButton();
        approveOrderJButton = new javax.swing.JButton();
        refreshJButton = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        trackOrderJButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(153, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Order Item", "Quantity", "Sender", "Receiver", "Status", "Supplier"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 871, 96));

        assignJButton.setBackground(new java.awt.Color(153, 153, 153));
        assignJButton.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        assignJButton.setText("Assign to me");
        assignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignJButtonActionPerformed(evt);
            }
        });
        add(assignJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 310, -1, -1));

        approveOrderJButton.setBackground(new java.awt.Color(153, 153, 153));
        approveOrderJButton.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        approveOrderJButton.setText("Approve");
        approveOrderJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                approveOrderJButtonActionPerformed(evt);
            }
        });
        add(approveOrderJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 310, -1, -1));

        refreshJButton.setBackground(new java.awt.Color(153, 153, 153));
        refreshJButton.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        refreshJButton.setText("Refresh");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });
        add(refreshJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 220, -1, -1));

        backJButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/AdministrativeRole/click-go-back-button.png"))); // NOI18N
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });
        add(backJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 540, 110, 50));

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Manage Order Approvals");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 861, 41));

        trackOrderJButton.setBackground(new java.awt.Color(153, 153, 153));
        trackOrderJButton.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        trackOrderJButton.setText("Track Order");
        trackOrderJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trackOrderJButtonActionPerformed(evt);
            }
        });
        add(trackOrderJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 310, -1, -1));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/AdministrativeRole/together-logo.png"))); // NOI18N
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 520, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void assignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignJButtonActionPerformed
        int selectedRow = workRequestJTable.getSelectedRow();
        if (selectedRow < 0){
            return;
        }
        OrderRequest request = (OrderRequest)workRequestJTable.getValueAt(selectedRow, 0);
        String status = request.getStatus();
        if(status != "Processed"){
            request.setReceiver(account);
            request.setStatus("In Process");
            JOptionPane.showMessageDialog(null, "You have been assigned");
            populateTable();
        }
    }//GEN-LAST:event_assignJButtonActionPerformed

    private void approveOrderJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_approveOrderJButtonActionPerformed
        int selectedRow = workRequestJTable.getSelectedRow();
        
        if (selectedRow < 0){
            return;
        }
        
        OrderRequest supplierOrganizationRequest = (OrderRequest)workRequestJTable.getValueAt(selectedRow, 0);
        if(supplierOrganizationRequest.getStatus().equals("Processed")){
            JOptionPane.showMessageDialog(null, "Order already Processed!");
            return;
        }
        
        SupplierEnterprise supplierEnterprise = (SupplierEnterprise) supplierOrganizationRequest.getSupplierEnterprise();
        supplierEnterprise.getOrganizationDirectory().createOrganization(supplierOrganizationRequest.getType());
        supplierOrganizationRequest.setStatus("Processed");
        JOptionPane.showMessageDialog(null, "Supplier Organization has been created successfully");
//        
//            OrderRequest lastRequest = request.getLastOrderRequest();
//            lastRequest.createAndGetNewOrderRequest().setSender(account);
//            lastRequest.createAndGetNewOrderRequest().setStatus("Processed by State, Forwarded to Distributor");
//            
//        for(SupplierEnterprise supplierEnterprise : network.getEnterpriseDirectory().getSupplierEnterprise()){
//            for(Supplier supplier: supplierEnterprise.getSupplierDirectory().getSupplierList()){
//                if(supplier.equals(request.getSupplier())){
//                    for(VaccineStock vaccineStock: supplier.getVaccineStocksAvailable()){
//                        if(vaccineStock.getVaccine().equals(request.getVaccine())){
//                            if(vaccineStock.getQuantity()>=request.getQuantity()){
//                                vaccineStock.setQuantity(vaccineStock.getQuantity()-request.getQuantity());
//                            }
//                            else{
//                                request.setQuantity(vaccineStock.getQuantity());
//                                vaccineStock.setQuantity(0);    
//                            }
//                        }
//                    }
//                }
//            }
//        }
//
//        Organization org = null;
//        
//        for(Enterprise enterpris: network.getEnterpriseDirectory().getEnterpriseList()){
//            if (enterpris instanceof DistributorEnterprise){
//                for (Organization organizatio : enterpris.getOrganizationDirectory().getOrganizationList()){
//                    if (organizatio instanceof InventoryManagementOrganization){
//                        org = organizatio;
//                        break;
//                    }
//                }
//            }
//        }
//        if (org!=null){
//            org.getOrderQueue().getOrderRequestList().add(request);
//            account.getOrderQueue().getOrderRequestList().add(request);
//        }
//        }
//        else{
//            JOptionPane.showMessageDialog(null,"Please Assign this order to yourself for processing !");
//        }
        populateTable();
    }//GEN-LAST:event_approveOrderJButtonActionPerformed

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        populateTable();
    }//GEN-LAST:event_refreshJButtonActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void trackOrderJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trackOrderJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = workRequestJTable.getSelectedRow();
        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null,"Please select a row !");
            return;
        }
//        OrderRequest request = (OrderRequest)workRequestJTable.getValueAt(selectedRow, 0);
//        TrackOrderJPanel trackOrderJPanel = new TrackOrderJPanel(userProcessContainer, request);
//        userProcessContainer.add("TrackOrderJPanel", trackOrderJPanel);
//        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
//        layout.next(userProcessContainer);

    }//GEN-LAST:event_trackOrderJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton approveOrderJButton;
    private javax.swing.JButton assignJButton;
    private javax.swing.JButton backJButton;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton refreshJButton;
    private javax.swing.JButton trackOrderJButton;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
